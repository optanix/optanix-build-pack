#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BPLOG_PREFIX="buildpack.generic"

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path

BUILD_DIR=$1 # <= /opt/APP_NAME/
CACHE_DIR=$2
ENV_DIR=$3
BUILD_ROOT=$(cd $(dirname $BUILD_DIR)/..; pwd) # <= /

source $BP_DIR/lib/common.sh

if [ -f ./Gopkg.toml ] ; then
  echo "Go"
  source $BP_DIR/lib/go-lang.sh
elif [ -d $1 ] ; then
  if [ -e $1/pom.xml ]; then
    for jarFile in $(find $1/ -maxdepth 3 -name "*jar-with-dependencies.jar" -type f); do
      echo "JavaMultiModule"
      source $BP_DIR/lib/java-multi-jar.sh
    done
  fi
elif [ -d $1/target/ ] ; then
  for jarFile in $(find $1/target -maxdepth 1 -name "*jar-with-dependencies.jar" -type f); do
    echo "Java"
    source $BP_DIR/lib/java-jar.sh
  done
elif [ -f $1/.perlcriticrc ] ; then
  echo "Perl"
  source $BP_DIR/lib/perl.sh
elif [ -f ./composer.json ] ; then
  echo "PHP"
  source $BP_DIR/lib/php.sh
elif [ -d $1/pkg-src ] ; then
  echo "Generic"
  source $BP_DIR/lib/generic.sh
elif [ -d $1/src/bin ]; then
  echo "Generic-Process"
  source $BP_DIR/lib/generic.sh
elif [ -d $1/packages/optanix-c ]; then
  echo "Optanix-C"
  source $BP_DIR/lib/generic.sh
else
  (>&2 echo "Could not find a matching profile! Please check that one exists and is committed to Git.")
  exit 1
fi

source <(curl -s --retry 3 -L $BUILDPACK_STDLIB_URL)

run_build $BUILD_DIR $CACHE_DIR $ENV_DIR $BUILD_ROOT

puts_step "Done compiling!"
